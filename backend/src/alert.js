import axios from 'axios';
import nodemailer from 'nodemailer';

// Email configuration from environment variables
const emailConfig = {
  from: process.env.EMAIL_FROM || 'hac.sank@gmail.com',
  to: process.env.EMAIL_TO || 'hac.sank@gmail.com',
  subject: 'CI/CD Build Failure Alert',
  smtp: {
    host: process.env.EMAIL_HOST || 'smtp.gmail.com',
    port: parseInt(process.env.EMAIL_PORT) || 587,
    secure: false,
    auth: {
      user: process.env.EMAIL_FROM || 'hac.sank@gmail.com',
      pass: process.env.EMAIL_PASSWORD || 'sanket@gmail.com'
    }
  }
};

// Create email transporter
const transporter = nodemailer.createTransport(emailConfig.smtp);

// Mock email service for demonstration (when real email fails)
const mockEmailService = {
  async sendEmail(to, subject, htmlContent) {
    console.log('ðŸ“§ MOCK EMAIL SENT (for demonstration):');
    console.log('   To:', to);
    console.log('   Subject:', subject);
    console.log('   Content Preview:', htmlContent.substring(0, 200) + '...');
    console.log('   ðŸ“§ Email would be sent in production environment');
    console.log('   ðŸ”§ To enable real emails, set up Gmail App Password');
    console.log('   ðŸ“– See EMAIL_SETUP_GUIDE.md for instructions');
    return { messageId: 'mock-' + Date.now() };
  }
};

export async function sendFailureAlert(run) {
  // Send Slack alert (if configured)
  await sendSlackAlert(run);
  
  // Send email alert
  await sendEmailAlert(run);
}

async function sendSlackAlert(run) {
  const webhookUrl = process.env.SLACK_WEBHOOK_URL;
  if (!webhookUrl) return;
  
  const text = `CI/CD Failure: ${run.pipelineName} (${run.provider}) on ${run.branch || 'unknown branch'}\n` +
               `Status: ${run.status}\n` +
               `Duration: ${run.durationMs ? Math.round(run.durationMs/1000) + 's' : 'n/a'}\n` +
               `${run.commitSha ? 'Commit: ' + run.commitSha + "\n" : ''}` +
               `${run.triggeredBy ? 'By: ' + run.triggeredBy + "\n" : ''}` +
               `${run.logs ? 'Logs: ' + (run.logs.slice(0, 2000)) : ''}`;
  
  try {
    await axios.post(webhookUrl, { text });
  } catch (err) {
    console.error('Failed to send Slack alert', err.message);
  }
}

async function sendEmailAlert(run) {
  const emailContent = `
    <h2>ðŸš¨ CI/CD Build Failure Alert</h2>
    
    <h3>Pipeline Details:</h3>
    <ul>
      <li><strong>Pipeline Name:</strong> ${run.pipelineName}</li>
      <li><strong>Provider:</strong> ${run.provider}</li>
      <li><strong>Status:</strong> <span style="color: red;">${run.status}</span></li>
      <li><strong>Branch:</strong> ${run.branch || 'Unknown'}</li>
      <li><strong>Commit SHA:</strong> ${run.commitSha || 'Unknown'}</li>
      <li><strong>Triggered By:</strong> ${run.triggeredBy || 'Unknown'}</li>
      <li><strong>Duration:</strong> ${run.durationMs ? Math.round(run.durationMs/1000) + ' seconds' : 'N/A'}</li>
      <li><strong>Started At:</strong> ${new Date(run.startedAt).toLocaleString()}</li>
      <li><strong>Finished At:</strong> ${run.finishedAt ? new Date(run.finishedAt).toLocaleString() : 'N/A'}</li>
    </ul>
    
    ${run.logs ? `
    <h3>Error Logs:</h3>
    <pre style="background-color: #f5f5f5; padding: 10px; border-radius: 5px; overflow-x: auto;">
${run.logs}
    </pre>
    ` : ''}
    
    <hr>
    <p><em>This alert was automatically generated by the CI/CD Health Dashboard.</em></p>
    <p><em>Time: ${new Date().toLocaleString()}</em></p>
  `;

  const mailOptions = {
    from: emailConfig.from,
    to: emailConfig.to,
    subject: `${emailConfig.subject} - ${run.pipelineName}`,
    html: emailContent
  };

  try {
    // Try to send real email first
    const info = await transporter.sendMail(mailOptions);
    console.log('ðŸ“§ Real email alert sent successfully:', info.messageId);
  } catch (err) {
    console.error('ðŸ“§ Real email failed, using mock service:', err.message);
    // Fall back to mock service for demonstration
    await mockEmailService.sendEmail(
      mailOptions.to, 
      mailOptions.subject, 
      emailContent
    );
  }
}

// Test email functionality
export async function testEmailConnection() {
  try {
    await transporter.verify();
    console.log('Email server connection verified successfully');
    return true;
  } catch (err) {
    console.log('Email server connection failed, mock service will be used');
    return false;
  }
}

